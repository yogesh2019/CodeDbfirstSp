here we will 
see ways to load objects

lazy loading
eager loading 
explicit loading

in this 

********** lazy loading

var course = context.Courses.Single(c => c.Id = 2);
for each ( var tag in course.tags)
	console(tag.name)

methods like single  or single default

first or first default
 count max avg 

 causes immeidiate execution

 but this course object here  does not have its tags intilized

 later when we iterate through tags
 course.tags is going to send another query to database
 to include the tages for this course

 so this is what we called lazy loading

 so let see how lazy loading is implementd

 this class is declared as virtual ICollectoin<Tag> Tags

 this is the key to lazy loading


 so what will happen during execution is

 this class will create a course proxy class

 with a little difference

 if tags is null then its going to load

 so we can see this proxy class at runtime


 Best pracises
 use when loading an object graph is costly
 use in desktop application as when required child pages are opened we can load related objects
 avoid in web applications

 so for web application you can disable lazy loading by not using virtual class

 we can use configuration to disable lazy loading

 in the plutocontext

 we can set this.configuration.lazyloadingEnabled = false;

 ************ n + 1 problem

 lazy loading can be a good solution to optimize the 
 application responsiveness

 if used inappropriately it can lead to n+1 problem

 n + 1 mean to get N entities and their related queries

 we will end up with n+1 queries

 courses = context.courses.toList()

 foreach var course in courses
	course.Name, course.Author.Name

so while iterating it will query each course object for authorname

n extra queries + 1

in sequel profiler i can see all this queries

these are all unnecessary queries

here it is only 4 extra queries as we had only 4 unique authors


********** eager loading 

it is opposite of lazy loading

we are loading related upfront to prevent additional queries to db

context.Courses.Include().ToList()

this has two overloads
first we can do like this
"Author"

using System.Data.Entiiy

c => c.Author
so with this if i change in future
i will get compile time error for this prop

we can use renameRefractoring

here the query will have inner join

/// now let see how to use eager loading with multiple levels

// for single properties
context.Courses.Include(c => c.Author.Address)

// for colletion properties
context.Courses.Include(a => a.Tags.Select(t.Moderator))

bad pracise
using too many includes

can lead to more and more complex queries