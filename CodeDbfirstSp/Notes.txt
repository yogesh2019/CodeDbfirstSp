************* funtion import


we can change the name here and it will internally map to our stored procedure


now why will you requ to change the name of the function

in lot of dbs functions start with func

and stored procedure start with sp

if we do dbContext.funcGetAuthorCourses()

we can change the name to follow the standard convention

so we can remove this func 

and put it like getGetAuthor courses

now lets take a look at getCourses function import

now in this case it returns complex 

how it complex different from entities

but entity framework also supports a different type which is called a comlex type



so as the model is similar to data  
we can modify the return type to Course

and we can delete the complex type

a good example is when stored procedure joins two tables and returns data



in that case the result cannot be mapped to your existing enitites


now lets add complex type for our getCourse

now while editing how do we add a complex tag

by default the name of the complex type is name of the stored procedure and name of 

of the stored_procedure

note that we have full control over this class

that we just created as complex type return

now if we take a look at level property of our model

the type of level property is string

there are two ways we can create a enum here 

lets start by creating a new enum

in our plutoMOdel


we have enum

i will add new enumm under enum

i will change that to byte

beginner intermediate and advanced 1, 3 and 3


now under courses type we can change the level property to enum

to provide the proper mappping

we need to change the varchar for level to byte


so with this enum type we can write clean code

var course = new Course();

course.Level = CourseLevel.Beginner


we can also create a new enum and reference here DbFirst.Level

so before querying we need to have dbcontext



as DbSet is a collection that represents table in the database

first we create a dbContext

var context = new PlutoContext()

we can use linq or extention methods both

from and in are linq key operators


now let see the other way to query your database

context.Courses.Where(c => c.Name.Contain('c#')).OrderBy(c => c.Name)

the second style of programmers is fine with lambda style programmers


the extension methods are more powerful

*********** linq syntax

i will do filering, projection, grouping and joining


restriction

all courses in level 1

start with from c

and ends with select c

we can add multiple contitions here like 

c.title && c.id

we can use orderby c.Name

c.Level descending	

but sometimes we might want to return a different object


sometimes we want to return a fewer properties for objects

so here instead of selecting c we will send

select new {Name = c.Name, Author = c.Author.Name}



we have group by in linq but this is different from the one in sql

in sql we use group by along with an aggregate function

in linq we dont necessarily use it group by

we use group to break list of objects into one or more group

note that here each group has three props which is based on the level of their group


so lets see group by in action

from c in context.couses
group c by c.level into g
select g

so what we get into result now is a list of groups

in loop
display group.key

a group is Enumerable so we can iterate over it
"\t{0}", course.Name

note that we didnt use here count or max

now what we want here is

console.writeLIne("{0}({1})")
what i want is course level and no of courses in that level

for what we will use here is 

group.key() and second will be our group.count()


************* joins

we have inner join, group join and cross joins

among this inner join and cross join are similar to sql 

but group is not equivalent of sql

so in a relational database 

we use joins to link to tables togethers 

you can use existing relation between your enities

var query
	from c in context.Courses
	select new {Coursename = c.name, AuthorName = c.Author.name}


so here we didnt need any join as we have navigation property

so you may ask when do we use inner join in link

inner join is used when we want to link properties that do not have
navigation property

imagice if we didnt had this nav property

from c in courses
join a in context.Authors on c.AuthorId equals a.Id
select new {CourseName  = c.Name, AuthoName = a.Name}
we use equals of link

*********** group joins

imagine we have two list authors on the left and courses on the right


we associate each object on the left with one or more mathing object on the right


these are useful when we use an left join and aggregate function in sequel

we want to get count of courses that all authors have


select a.name,
 from Authors A
 Left join courses C
 ON a.authorId = c.AuthorId

 and finally add group by a.name

 select a.name,count(*)
 from Authors A
 Left join courses C
 ON a.authorId = c.AuthorId

 and finally add group by a.name

 so we can actually do this using group join


 so we can do like 

 from a in context.Authors
 join c in context.Courses on a.Id equals c.AuthorId into g

 the only difference here is g operator

 so this will a standard join

 but when you use into g 

 the result will be a group join

 as we said group join select each object on left

 with one or more mathing objects on the right side

 select new {AthorName = a.Name, Courses = g.Count()}


 so thats why i told we use group join in links in situation where we use left join in sequel

