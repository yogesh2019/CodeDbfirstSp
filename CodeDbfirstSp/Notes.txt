************* funtion import


we can change the name here and it will internally map to our stored procedure


now why will you requ to change the name of the function

in lot of dbs functions start with func

and stored procedure start with sp

if we do dbContext.funcGetAuthorCourses()

we can change the name to follow the standard convention

so we can remove this func 

and put it like getGetAuthor courses

now lets take a look at getCourses function import

now in this case it returns complex 

how it complex different from entities

but entity framework also supports a different type which is called a comlex type



so as the model is similar to data  
we can modify the return type to Course

and we can delete the complex type

a good example is when stored procedure joins two tables and returns data



in that case the result cannot be mapped to your existing enitites


now lets add complex type for our getCourse

now while editing how do we add a complex tag

by default the name of the complex type is name of the stored procedure and name of 

of the stored_procedure

note that we have full control over this class

that we just created as complex type return

now if we take a look at level property of our model

the type of level property is string

there are two ways we can create a enum here 

lets start by creating a new enum

in our plutoMOdel


we have enum

i will add new enumm under enum

i will change that to byte

beginner intermediate and advanced 1, 3 and 3


now under courses type we can change the level property to enum

to provide the proper mappping

we need to change the varchar for level to byte


so with this enum type we can write clean code

var course = new Course();

course.Level = CourseLevel.Beginner


we can also create a new enum and reference here DbFirst.Level

so before querying we need to have dbcontext



as DbSet is a collection that represents table in the database

first we create a dbContext

var context = new PlutoContext()

we can use linq or extention methods both

from and in are linq key operators


now let see the other way to query your database

context.Courses.Where(c => c.Name.Contain('c#')).OrderBy(c => c.Name)

the second style of programmers is fine with lambda style programmers


the extension methods are more powerful

*********** linq syntax

i will do filering, projection, grouping and joining


restriction

all courses in level 1

start with from c

and ends with select c

we can add multiple contitions here like 

c.title && c.id

we can use orderby c.Name

c.Level descending	

but sometimes we might want to return a different object

